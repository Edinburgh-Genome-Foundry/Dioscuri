{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dioscuri Dioscuri is a Python package for working with Gemini WorkList (gwl) files and objects. A Gemini worklist file is a text file that contains pipetting instructions for the Tecan Freedom EVO robots. Dioscuri uses the Freedom EVOware (v2.7) software's specification of the gwl format. Dioscuri is a name for Castor and Pollux, the twins who were transformed into the Gemini constellation in Greek mythology. Install pip install dioscuri Usage import dioscuri aspirate = dioscuri . Pipette ( operation = \"Aspirate\" , rack_label = \"Source1\" , rack_type = \"4ti-0960/B on raised carrier\" , position = \"3\" , volume = \"50\" ) aspirate . to_string () dispense = dioscuri . Pipette ( operation = \"D\" , rack_label = \"Destination\" , rack_type = \"4ti-0960/B on CPAC\" , position = \"1\" , volume = \"50\" ) wash = dioscuri . WashTipOrReplaceDITI () worklist = dioscuri . GeminiWorkList ( name = \"my_worklist\" , records = [ aspirate , dispense , wash ]) worklist . records_to_string () print ( worklist . records_to_string ()) # A;Source1;;4ti-0960/B on raised carrier;3;;50;;;; # D;Destination;;4ti-0960/B on CPAC;1;;50;;;; # W; The generated string can be saved in a text file: with open ( \"picklist.gwl\" , \"w\" , encoding = 'utf8' ) as f : f . write ( worklist . records_to_string ()) Versioning Dioscuri uses the semantic versioning scheme. License = MIT Dioscuri is free software , which means the users have the freedom to run, copy, distribute, study, change and improve the software. Dioscuri was written at the Edinburgh Genome Foundry by Peter Vegh and is released under the MIT license.","title":"Home"},{"location":"#dioscuri","text":"Dioscuri is a Python package for working with Gemini WorkList (gwl) files and objects. A Gemini worklist file is a text file that contains pipetting instructions for the Tecan Freedom EVO robots. Dioscuri uses the Freedom EVOware (v2.7) software's specification of the gwl format. Dioscuri is a name for Castor and Pollux, the twins who were transformed into the Gemini constellation in Greek mythology.","title":"Dioscuri"},{"location":"#install","text":"pip install dioscuri","title":"Install"},{"location":"#usage","text":"import dioscuri aspirate = dioscuri . Pipette ( operation = \"Aspirate\" , rack_label = \"Source1\" , rack_type = \"4ti-0960/B on raised carrier\" , position = \"3\" , volume = \"50\" ) aspirate . to_string () dispense = dioscuri . Pipette ( operation = \"D\" , rack_label = \"Destination\" , rack_type = \"4ti-0960/B on CPAC\" , position = \"1\" , volume = \"50\" ) wash = dioscuri . WashTipOrReplaceDITI () worklist = dioscuri . GeminiWorkList ( name = \"my_worklist\" , records = [ aspirate , dispense , wash ]) worklist . records_to_string () print ( worklist . records_to_string ()) # A;Source1;;4ti-0960/B on raised carrier;3;;50;;;; # D;Destination;;4ti-0960/B on CPAC;1;;50;;;; # W; The generated string can be saved in a text file: with open ( \"picklist.gwl\" , \"w\" , encoding = 'utf8' ) as f : f . write ( worklist . records_to_string ())","title":"Usage"},{"location":"#versioning","text":"Dioscuri uses the semantic versioning scheme.","title":"Versioning"},{"location":"#license-mit","text":"Dioscuri is free software , which means the users have the freedom to run, copy, distribute, study, change and improve the software. Dioscuri was written at the Edinburgh Genome Foundry by Peter Vegh and is released under the MIT license.","title":"License = MIT"},{"location":"reference/dioscuri/","text":"Module dioscuri View Source from .dioscuri import GeminiWorkList , Pipette , WashTipOrReplaceDITI from .version import __version__ Sub-modules dioscuri.dioscuri dioscuri.version","title":"Index"},{"location":"reference/dioscuri/#module-dioscuri","text":"View Source from .dioscuri import GeminiWorkList , Pipette , WashTipOrReplaceDITI from .version import __version__","title":"Module dioscuri"},{"location":"reference/dioscuri/#sub-modules","text":"dioscuri.dioscuri dioscuri.version","title":"Sub-modules"},{"location":"reference/dioscuri/dioscuri/","text":"Module dioscuri.dioscuri Classes for representing a Gemini WorkList (gwl). The gwl file specification is based on the Freedom EVOware Software Manual, 393172, v3.5 (2015), for the Tecan Freedom EVOware v2.7 software (note different versioning for manual and software). DiTi is short for 'Disposable Tip'. View Source \"\"\"Classes for representing a Gemini WorkList (gwl). The gwl file specification is based on the Freedom EVOware Software Manual, 393172, v3.5 (2015), for the Tecan Freedom EVOware v2.7 software (note different versioning for manual and software). DiTi is short for 'Disposable Tip'. \"\"\" class GeminiWorkList : \"\"\"Gemini WorkList (gwl) class. A WorkList is a list of pipetting commands, or 'records'. **Parameters** **name** > name of the worklist (`str`). **records** > `list` of records (Pipette class instances). \"\"\" def __init__ ( self , name = \"worklist\" , records = None ): self . name = name if records is None : self . records = [] else : self . records = records def add_record ( self , record ): \"\"\"Add record. **Parameters** **record** > `Pipette` \"\"\" self . records . append ( record ) def list_records ( self ): for record in self . records : # call readable print of record pass def records_to_string ( self ): records_as_string = \"\" for record in self . records : records_as_string += record . to_string () records_as_string += \"\\n\" pass return records_as_string class Pipette : \"\"\"General class for Aspirate and Dispense records. A record consists of a single character indicating the operation type, and one or more 'parameters'. Note that parameter MinDetectedVolume is not implemented. **Parameters** **operation** > The type of the transfer (`str`): `A` for aspirate, or `D` for dispense. **rack_label** > Label (`str`) which is assigned to the labware. Maximum 32 characters. **rack_id** > Labware barcode (`str`). Maximum 32 characters. **rack_type** > Labware type (`str`): configuration name, for example \" 384 Well , landscape \". Maximum 32 characters. **position** > Well position in the labware (`int`). The position starts with 1 and increases from rear to front and left to right. Range: 1 .. number of wells. **tube_id** > Tube barcode (`str`). Maximum 32 characters. **volume** > Pipetting volume (`int`) in \u00b5l (microliter). Range: 0 .. 7158278. **liquid_class** > Optional (`str`). Overwrites the liquid class specified in the Tecan EVOware Worklist command that calls the gwl file. Maximum 32 characters. **tip_mask** > Optional (`str`). Specifies the tip you want to use. See details in the program that uses the gwl output file. Range: 1 .. 128. **forced_rack_type** > Optional (`str`). The configuration name of the labware. Maximum 32 characters. \"\"\" def __init__ ( self , operation , rack_label , rack_type , position , volume , tube_id = \"\" , rack_id = \"\" , liquid_class = \"\" , tip_mask = \"\" , forced_rack_type = \"\" , ): self . type_character = operation [ 0 ] # Parameters: self . rack_label = rack_label self . rack_id = rack_id self . rack_type = rack_type self . position = position self . tube_id = tube_id self . volume = volume self . liquid_class = liquid_class self . tip_mask = tip_mask self . forced_rack_type = forced_rack_type self . tip_type = \"\" # Reserved, must be omitted. def to_string ( self ): parameters = [ self . type_character , self . rack_label , self . rack_id , self . rack_type , str ( self . position ), self . tube_id , str ( self . volume ), self . liquid_class , self . tip_type , self . tip_mask , self . forced_rack_type , ] record_as_string = \";\" . join ( parameters ) return record_as_string class WashTipOrReplaceDITI : \"\"\"Class for WashTip or ReplaceDITI records. **Parameters** **scheme** > Number (`int`) of wash scheme to use. Default `None`, which uses the first wash scheme. \"\"\" def __init__ ( self , scheme = None ): if scheme is None : self . scheme = \"\" else : self . scheme = str ( scheme ) self . type_character = \"W\" def to_string ( self ): \"\"\"Convert record into string representation.\"\"\" record_as_string = self . type_character + self . scheme + \";\" return record_as_string class Decontamination : pass class Flush : pass class Break : pass class SetDITIType : pass class Comment : pass class ReagentDistribution : pass Classes Break class Break ( / , * args , ** kwargs ) View Source class Break: pass Comment class Comment ( / , * args , ** kwargs ) View Source class Comment: pass Decontamination class Decontamination ( / , * args , ** kwargs ) View Source class Decontamination: pass Flush class Flush ( / , * args , ** kwargs ) View Source class Flush: pass GeminiWorkList class GeminiWorkList ( name = 'worklist' , records = None ) Gemini WorkList (gwl) class. A WorkList is a list of pipetting commands, or 'records'. Parameters name name of the worklist ( str ). records list of records (Pipette class instances). View Source class GeminiWorkList : \"\"\"Gemini WorkList (gwl) class. A WorkList is a list of pipetting commands, or 'records'. **Parameters** **name** > name of the worklist (`str`). **records** > `list` of records (Pipette class instances). \"\"\" def __init__ ( self , name = \"worklist\" , records = None ): self . name = name if records is None : self . records = [] else : self . records = records def add_record ( self , record ): \"\"\"Add record. **Parameters** **record** > `Pipette` \"\"\" self . records . append ( record ) def list_records ( self ): for record in self . records : # call readable print of record pass def records_to_string ( self ): records_as_string = \"\" for record in self . records : records_as_string += record . to_string () records_as_string += \"\\n\" pass return records_as_string Methods add_record def add_record ( self , record ) Add record. Parameters record Pipette View Source def add_record ( self , record ): \"\"\"Add record. **Parameters** **record** > `Pipette` \"\"\" self . records . append ( record ) list_records def list_records ( self ) View Source def list_records ( self ): for record in self . records : # call readable print of record pass records_to_string def records_to_string ( self ) View Source def records_to_string ( self ): records_as_string = \"\" for record in self . records : records_as_string += record . to_string () records_as_string += \"\\n\" pass return records_as_string Pipette class Pipette ( operation , rack_label , rack_type , position , volume , tube_id = '' , rack_id = '' , liquid_class = '' , tip_mask = '' , forced_rack_type = '' ) General class for Aspirate and Dispense records. A record consists of a single character indicating the operation type, and one or more 'parameters'. Note that parameter MinDetectedVolume is not implemented. Parameters operation The type of the transfer ( str ): A for aspirate, or D for dispense. rack_label Label ( str ) which is assigned to the labware. Maximum 32 characters. rack_id Labware barcode ( str ). Maximum 32 characters. rack_type Labware type ( str ): configuration name, for example \"384 Well, landscape\". Maximum 32 characters. position Well position in the labware ( int ). The position starts with 1 and increases from rear to front and left to right. Range: 1 .. number of wells. tube_id Tube barcode ( str ). Maximum 32 characters. volume Pipetting volume ( int ) in \u00b5l (microliter). Range: 0 .. 7158278. liquid_class Optional ( str ). Overwrites the liquid class specified in the Tecan EVOware Worklist command that calls the gwl file. Maximum 32 characters. tip_mask Optional ( str ). Specifies the tip you want to use. See details in the program that uses the gwl output file. Range: 1 .. 128. forced_rack_type Optional ( str ). The configuration name of the labware. Maximum 32 characters. View Source class Pipette : \"\"\"General class for Aspirate and Dispense records. A record consists of a single character indicating the operation type, and one or more 'parameters'. Note that parameter MinDetectedVolume is not implemented. **Parameters** **operation** > The type of the transfer (`str`): `A` for aspirate, or `D` for dispense. **rack_label** > Label (`str`) which is assigned to the labware. Maximum 32 characters. **rack_id** > Labware barcode (`str`). Maximum 32 characters. **rack_type** > Labware type (`str`): configuration name, for example \" 384 Well , landscape \". Maximum 32 characters. **position** > Well position in the labware (`int`). The position starts with 1 and increases from rear to front and left to right. Range: 1 .. number of wells. **tube_id** > Tube barcode (`str`). Maximum 32 characters. **volume** > Pipetting volume (`int`) in \u00b5l (microliter). Range: 0 .. 7158278. **liquid_class** > Optional (`str`). Overwrites the liquid class specified in the Tecan EVOware Worklist command that calls the gwl file. Maximum 32 characters. **tip_mask** > Optional (`str`). Specifies the tip you want to use. See details in the program that uses the gwl output file. Range: 1 .. 128. **forced_rack_type** > Optional (`str`). The configuration name of the labware. Maximum 32 characters. \"\"\" def __init__ ( self , operation , rack_label , rack_type , position , volume , tube_id = \"\" , rack_id = \"\" , liquid_class = \"\" , tip_mask = \"\" , forced_rack_type = \"\" , ): self . type_character = operation [ 0 ] # Parameters: self . rack_label = rack_label self . rack_id = rack_id self . rack_type = rack_type self . position = position self . tube_id = tube_id self . volume = volume self . liquid_class = liquid_class self . tip_mask = tip_mask self . forced_rack_type = forced_rack_type self . tip_type = \"\" # Reserved, must be omitted. def to_string ( self ): parameters = [ self . type_character , self . rack_label , self . rack_id , self . rack_type , str ( self . position ), self . tube_id , str ( self . volume ), self . liquid_class , self . tip_type , self . tip_mask , self . forced_rack_type , ] record_as_string = \";\" . join ( parameters ) return record_as_string Methods to_string def to_string ( self ) View Source def to_string ( self ): parameters = [ self . type_character , self . rack_label , self . rack_id , self . rack_type , str ( self . position ), self . tube_id , str ( self . volume ), self . liquid_class , self . tip_type , self . tip_mask , self . forced_rack_type , ] record_as_string = \";\" . join ( parameters ) return record_as_string ReagentDistribution class ReagentDistribution ( / , * args , ** kwargs ) View Source class ReagentDistribution: pass SetDITIType class SetDITIType ( / , * args , ** kwargs ) View Source class SetDITIType: pass WashTipOrReplaceDITI class WashTipOrReplaceDITI ( scheme = None ) Class for WashTip or ReplaceDITI records. Parameters scheme Number ( int ) of wash scheme to use. Default None , which uses the first wash scheme. View Source class WashTipOrReplaceDITI : \"\"\"Class for WashTip or ReplaceDITI records. **Parameters** **scheme** > Number (`int`) of wash scheme to use. Default `None`, which uses the first wash scheme. \"\"\" def __init__ ( self , scheme = None ): if scheme is None : self . scheme = \"\" else : self . scheme = str ( scheme ) self . type_character = \"W\" def to_string ( self ): \"\"\"Convert record into string representation.\"\"\" record_as_string = self . type_character + self . scheme + \";\" return record_as_string Methods to_string def to_string ( self ) Convert record into string representation. View Source def to_string ( self ): \"\"\"Convert record into string representation.\"\"\" record_as_string = self . type_character + self . scheme + \";\" return record_as_string","title":"Dioscuri"},{"location":"reference/dioscuri/dioscuri/#module-dioscuridioscuri","text":"Classes for representing a Gemini WorkList (gwl). The gwl file specification is based on the Freedom EVOware Software Manual, 393172, v3.5 (2015), for the Tecan Freedom EVOware v2.7 software (note different versioning for manual and software). DiTi is short for 'Disposable Tip'. View Source \"\"\"Classes for representing a Gemini WorkList (gwl). The gwl file specification is based on the Freedom EVOware Software Manual, 393172, v3.5 (2015), for the Tecan Freedom EVOware v2.7 software (note different versioning for manual and software). DiTi is short for 'Disposable Tip'. \"\"\" class GeminiWorkList : \"\"\"Gemini WorkList (gwl) class. A WorkList is a list of pipetting commands, or 'records'. **Parameters** **name** > name of the worklist (`str`). **records** > `list` of records (Pipette class instances). \"\"\" def __init__ ( self , name = \"worklist\" , records = None ): self . name = name if records is None : self . records = [] else : self . records = records def add_record ( self , record ): \"\"\"Add record. **Parameters** **record** > `Pipette` \"\"\" self . records . append ( record ) def list_records ( self ): for record in self . records : # call readable print of record pass def records_to_string ( self ): records_as_string = \"\" for record in self . records : records_as_string += record . to_string () records_as_string += \"\\n\" pass return records_as_string class Pipette : \"\"\"General class for Aspirate and Dispense records. A record consists of a single character indicating the operation type, and one or more 'parameters'. Note that parameter MinDetectedVolume is not implemented. **Parameters** **operation** > The type of the transfer (`str`): `A` for aspirate, or `D` for dispense. **rack_label** > Label (`str`) which is assigned to the labware. Maximum 32 characters. **rack_id** > Labware barcode (`str`). Maximum 32 characters. **rack_type** > Labware type (`str`): configuration name, for example \" 384 Well , landscape \". Maximum 32 characters. **position** > Well position in the labware (`int`). The position starts with 1 and increases from rear to front and left to right. Range: 1 .. number of wells. **tube_id** > Tube barcode (`str`). Maximum 32 characters. **volume** > Pipetting volume (`int`) in \u00b5l (microliter). Range: 0 .. 7158278. **liquid_class** > Optional (`str`). Overwrites the liquid class specified in the Tecan EVOware Worklist command that calls the gwl file. Maximum 32 characters. **tip_mask** > Optional (`str`). Specifies the tip you want to use. See details in the program that uses the gwl output file. Range: 1 .. 128. **forced_rack_type** > Optional (`str`). The configuration name of the labware. Maximum 32 characters. \"\"\" def __init__ ( self , operation , rack_label , rack_type , position , volume , tube_id = \"\" , rack_id = \"\" , liquid_class = \"\" , tip_mask = \"\" , forced_rack_type = \"\" , ): self . type_character = operation [ 0 ] # Parameters: self . rack_label = rack_label self . rack_id = rack_id self . rack_type = rack_type self . position = position self . tube_id = tube_id self . volume = volume self . liquid_class = liquid_class self . tip_mask = tip_mask self . forced_rack_type = forced_rack_type self . tip_type = \"\" # Reserved, must be omitted. def to_string ( self ): parameters = [ self . type_character , self . rack_label , self . rack_id , self . rack_type , str ( self . position ), self . tube_id , str ( self . volume ), self . liquid_class , self . tip_type , self . tip_mask , self . forced_rack_type , ] record_as_string = \";\" . join ( parameters ) return record_as_string class WashTipOrReplaceDITI : \"\"\"Class for WashTip or ReplaceDITI records. **Parameters** **scheme** > Number (`int`) of wash scheme to use. Default `None`, which uses the first wash scheme. \"\"\" def __init__ ( self , scheme = None ): if scheme is None : self . scheme = \"\" else : self . scheme = str ( scheme ) self . type_character = \"W\" def to_string ( self ): \"\"\"Convert record into string representation.\"\"\" record_as_string = self . type_character + self . scheme + \";\" return record_as_string class Decontamination : pass class Flush : pass class Break : pass class SetDITIType : pass class Comment : pass class ReagentDistribution : pass","title":"Module dioscuri.dioscuri"},{"location":"reference/dioscuri/dioscuri/#classes","text":"","title":"Classes"},{"location":"reference/dioscuri/dioscuri/#break","text":"class Break ( / , * args , ** kwargs ) View Source class Break: pass","title":"Break"},{"location":"reference/dioscuri/dioscuri/#comment","text":"class Comment ( / , * args , ** kwargs ) View Source class Comment: pass","title":"Comment"},{"location":"reference/dioscuri/dioscuri/#decontamination","text":"class Decontamination ( / , * args , ** kwargs ) View Source class Decontamination: pass","title":"Decontamination"},{"location":"reference/dioscuri/dioscuri/#flush","text":"class Flush ( / , * args , ** kwargs ) View Source class Flush: pass","title":"Flush"},{"location":"reference/dioscuri/dioscuri/#geminiworklist","text":"class GeminiWorkList ( name = 'worklist' , records = None ) Gemini WorkList (gwl) class. A WorkList is a list of pipetting commands, or 'records'. Parameters name name of the worklist ( str ). records list of records (Pipette class instances). View Source class GeminiWorkList : \"\"\"Gemini WorkList (gwl) class. A WorkList is a list of pipetting commands, or 'records'. **Parameters** **name** > name of the worklist (`str`). **records** > `list` of records (Pipette class instances). \"\"\" def __init__ ( self , name = \"worklist\" , records = None ): self . name = name if records is None : self . records = [] else : self . records = records def add_record ( self , record ): \"\"\"Add record. **Parameters** **record** > `Pipette` \"\"\" self . records . append ( record ) def list_records ( self ): for record in self . records : # call readable print of record pass def records_to_string ( self ): records_as_string = \"\" for record in self . records : records_as_string += record . to_string () records_as_string += \"\\n\" pass return records_as_string","title":"GeminiWorkList"},{"location":"reference/dioscuri/dioscuri/#methods","text":"","title":"Methods"},{"location":"reference/dioscuri/dioscuri/#add_record","text":"def add_record ( self , record ) Add record. Parameters record Pipette View Source def add_record ( self , record ): \"\"\"Add record. **Parameters** **record** > `Pipette` \"\"\" self . records . append ( record )","title":"add_record"},{"location":"reference/dioscuri/dioscuri/#list_records","text":"def list_records ( self ) View Source def list_records ( self ): for record in self . records : # call readable print of record pass","title":"list_records"},{"location":"reference/dioscuri/dioscuri/#records_to_string","text":"def records_to_string ( self ) View Source def records_to_string ( self ): records_as_string = \"\" for record in self . records : records_as_string += record . to_string () records_as_string += \"\\n\" pass return records_as_string","title":"records_to_string"},{"location":"reference/dioscuri/dioscuri/#pipette","text":"class Pipette ( operation , rack_label , rack_type , position , volume , tube_id = '' , rack_id = '' , liquid_class = '' , tip_mask = '' , forced_rack_type = '' ) General class for Aspirate and Dispense records. A record consists of a single character indicating the operation type, and one or more 'parameters'. Note that parameter MinDetectedVolume is not implemented. Parameters operation The type of the transfer ( str ): A for aspirate, or D for dispense. rack_label Label ( str ) which is assigned to the labware. Maximum 32 characters. rack_id Labware barcode ( str ). Maximum 32 characters. rack_type Labware type ( str ): configuration name, for example \"384 Well, landscape\". Maximum 32 characters. position Well position in the labware ( int ). The position starts with 1 and increases from rear to front and left to right. Range: 1 .. number of wells. tube_id Tube barcode ( str ). Maximum 32 characters. volume Pipetting volume ( int ) in \u00b5l (microliter). Range: 0 .. 7158278. liquid_class Optional ( str ). Overwrites the liquid class specified in the Tecan EVOware Worklist command that calls the gwl file. Maximum 32 characters. tip_mask Optional ( str ). Specifies the tip you want to use. See details in the program that uses the gwl output file. Range: 1 .. 128. forced_rack_type Optional ( str ). The configuration name of the labware. Maximum 32 characters. View Source class Pipette : \"\"\"General class for Aspirate and Dispense records. A record consists of a single character indicating the operation type, and one or more 'parameters'. Note that parameter MinDetectedVolume is not implemented. **Parameters** **operation** > The type of the transfer (`str`): `A` for aspirate, or `D` for dispense. **rack_label** > Label (`str`) which is assigned to the labware. Maximum 32 characters. **rack_id** > Labware barcode (`str`). Maximum 32 characters. **rack_type** > Labware type (`str`): configuration name, for example \" 384 Well , landscape \". Maximum 32 characters. **position** > Well position in the labware (`int`). The position starts with 1 and increases from rear to front and left to right. Range: 1 .. number of wells. **tube_id** > Tube barcode (`str`). Maximum 32 characters. **volume** > Pipetting volume (`int`) in \u00b5l (microliter). Range: 0 .. 7158278. **liquid_class** > Optional (`str`). Overwrites the liquid class specified in the Tecan EVOware Worklist command that calls the gwl file. Maximum 32 characters. **tip_mask** > Optional (`str`). Specifies the tip you want to use. See details in the program that uses the gwl output file. Range: 1 .. 128. **forced_rack_type** > Optional (`str`). The configuration name of the labware. Maximum 32 characters. \"\"\" def __init__ ( self , operation , rack_label , rack_type , position , volume , tube_id = \"\" , rack_id = \"\" , liquid_class = \"\" , tip_mask = \"\" , forced_rack_type = \"\" , ): self . type_character = operation [ 0 ] # Parameters: self . rack_label = rack_label self . rack_id = rack_id self . rack_type = rack_type self . position = position self . tube_id = tube_id self . volume = volume self . liquid_class = liquid_class self . tip_mask = tip_mask self . forced_rack_type = forced_rack_type self . tip_type = \"\" # Reserved, must be omitted. def to_string ( self ): parameters = [ self . type_character , self . rack_label , self . rack_id , self . rack_type , str ( self . position ), self . tube_id , str ( self . volume ), self . liquid_class , self . tip_type , self . tip_mask , self . forced_rack_type , ] record_as_string = \";\" . join ( parameters ) return record_as_string","title":"Pipette"},{"location":"reference/dioscuri/dioscuri/#methods_1","text":"","title":"Methods"},{"location":"reference/dioscuri/dioscuri/#to_string","text":"def to_string ( self ) View Source def to_string ( self ): parameters = [ self . type_character , self . rack_label , self . rack_id , self . rack_type , str ( self . position ), self . tube_id , str ( self . volume ), self . liquid_class , self . tip_type , self . tip_mask , self . forced_rack_type , ] record_as_string = \";\" . join ( parameters ) return record_as_string","title":"to_string"},{"location":"reference/dioscuri/dioscuri/#reagentdistribution","text":"class ReagentDistribution ( / , * args , ** kwargs ) View Source class ReagentDistribution: pass","title":"ReagentDistribution"},{"location":"reference/dioscuri/dioscuri/#setdititype","text":"class SetDITIType ( / , * args , ** kwargs ) View Source class SetDITIType: pass","title":"SetDITIType"},{"location":"reference/dioscuri/dioscuri/#washtiporreplacediti","text":"class WashTipOrReplaceDITI ( scheme = None ) Class for WashTip or ReplaceDITI records. Parameters scheme Number ( int ) of wash scheme to use. Default None , which uses the first wash scheme. View Source class WashTipOrReplaceDITI : \"\"\"Class for WashTip or ReplaceDITI records. **Parameters** **scheme** > Number (`int`) of wash scheme to use. Default `None`, which uses the first wash scheme. \"\"\" def __init__ ( self , scheme = None ): if scheme is None : self . scheme = \"\" else : self . scheme = str ( scheme ) self . type_character = \"W\" def to_string ( self ): \"\"\"Convert record into string representation.\"\"\" record_as_string = self . type_character + self . scheme + \";\" return record_as_string","title":"WashTipOrReplaceDITI"},{"location":"reference/dioscuri/dioscuri/#methods_2","text":"","title":"Methods"},{"location":"reference/dioscuri/dioscuri/#to_string_1","text":"def to_string ( self ) Convert record into string representation. View Source def to_string ( self ): \"\"\"Convert record into string representation.\"\"\" record_as_string = self . type_character + self . scheme + \";\" return record_as_string","title":"to_string"},{"location":"reference/dioscuri/version/","text":"Module dioscuri.version View Source __version__ = \"0.1.0\"","title":"Version"},{"location":"reference/dioscuri/version/#module-dioscuriversion","text":"View Source __version__ = \"0.1.0\"","title":"Module dioscuri.version"}]}